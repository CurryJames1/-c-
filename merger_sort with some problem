#include <stdio.h>
#include <stdlib.h>

typedef int elem;
typedef struct list{
   elem *count;
   int length;
};
void initial_list(list &li){
    int i;
    scanf("%d",&li.length);
    //Apply for address space
    li.count = (elem*) calloc(li.length,sizeof (elem));
    for(i=0;i<li.length;i++){
        //loop to read the content in buffer and fill it in list
        scanf("%d",&li.count[i]);
    }
}
void exchange_elem(int &a,int &b){
    int temp;
    temp = a;
    a = b;
    b = temp;
}
void bubble_sort(list &li){
    //swap sort
    int i,j;
    bool flag;
    for (i=0;i<li.length;i++){
        flag = false;
        for(j=li.length;j>i;j--){
            if(li.count[j]<li.count[j-1]){
                exchange_elem(li.count[j],li.count[j-1]);
                flag = true;
            }
        }
        if (false == flag){
            return;
        }
    }
}
int pation(elem *A,int low,int high){
    elem pivot ;
    pivot = A[low];//set the first number of this list to judgment value
    while(low<high){
        while(low<high && A[high]>=pivot){
            high--;//keep looking for the number smaller than the judgement value
        }
        A[low] = A[high];//swap numbers,use the high position number cover the number in low position
        while(low<high && A[low]<=pivot){
            low++;//keep looking for the number bigger than the judgment value
        }
        A[high] = A[low];//swap numbers,use the low position number cover the high position number
    }
    A[low] = pivot;
   return low;
}
void quick_sort(elem *A,int low,int high){
    //swap sort
    if(low<high){
        int portion_pos = pation(A,low,high);
        //pay attention to the +1,the program will loop endlessly without this,
        //because the number at this position have been sorted
        quick_sort(A,portion_pos+1,high);
        //pay attention to the -1,the program will loop endlessly without this
        //because the number at this position have been sorted
        quick_sort(A,low,portion_pos-1);
    } else{ return;}

}
void insert_sort(elem *A,int n){
    int i,j,interval;
    for (i=1;i<n;i++){
        interval = A[i];
        for(j=i-1;j>=0&&A[j]>=interval;j--){
            A[j+1]=A[j];
        }
        A[j+1] = interval;
    }
}
void select_sort(elem *&A,int n){
    int i , j ,min;
    for (i=0;i<n-1;i++){
        min = i;
        for(j=i+1;j<n;j++){
            if(A[j]<A[min]){
                min = j;
            }
        }
        if(min != i){
            exchange_elem(A[i],A[min]);
        }
    }
}
void adjust_heap(elem *A,int k,int len){
    int father = k;//
    int son = father*2;//pay attention to this value while need change according to length
    while(son<len){
        //compare the value between father's left child and right child
        if(son+1<len-1&&A[son]<A[son+1]){
            son++;
        }
        if(A[son]>A[father]){
        // exchange the elem at son and father pos,and renew the father and son to adjust the new list
            exchange_elem(A[son],A[father]);
            father = son;
            son = father*2;
        }else{
            break;
        }
    }
}
void heap_sort(elem *A,int a){//be careful the number 'a' you have pass in
    int i;
    //adjust the list to heap
    for(i=(a+1)/2;i>=0;i--){
        //adjust the i-th subtree in turn
        adjust_heap(A,i,a);
    }
    //swap the elem at the top heap and at the tail heap
    exchange_elem(A[0],A[a]);
    //continue to adjust the remaining elem to a heap
    for (i=a-1;i>0;i--){
        //only the first elem need to be adjusted each time
        adjust_heap(A,0,i);
        //swap the last disorder elem and the root elem
        exchange_elem(A[0],A[i]);
    }
}
void merger(elem *&A,int low,int mid,int high){
    int i,j,k;
    static elem *B = A;
    for(i=low,j=mid+1,k=low;i<=mid&&j<=high;k++){
        if (B[i]<=B[j]){
            i++;
            A[k]=B[i];
        } else if(B[i]>B[j]){
            j++;
            A[k]=B[j];
        }
    }
    while(i<=mid){
        i++;
        A[i]=B[i];
    }
    while(j<=high){
        j++;
        A[j]=B[j];
    }
}

void merger_sort(elem *A,int high,int low){
    if (low<high){
        int mid = (low+high)/2;
        merger_sort(A,low,mid);
        merger_sort(A,mid+1,high);
        merger(A,low,mid,high);
    }
}

int main(){
    list li;
    int i;
    initial_list(li);
    merger_sort(li.count,0,li.length-1);
    for (i=0;i<li.length;i++){
        printf("%d  ",li.count[i]);
    }
    return 0;
}
