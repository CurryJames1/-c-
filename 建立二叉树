#include <stdio.h>
#include <stdlib.h>
//#include <stdint.h>


typedef char elemptype;
typedef struct bi_tree{
    elemptype cont;
    bi_tree *lchild,*rchild;
}Binote, *bitree;

//定义一个结构体，用于构建辅助队列，不必单独再去构建一个辅助队列结构体
typedef struct auxiliary_queue_member{
    bitree p;//二叉树节点指针
    //定义结构体指针，用与指向队列下一个，
    struct auxiliary_queue_member *next;
}queuemember,*qmem;


int main() {
    //定义一个树节点，用于存放新的树节点
    bitree pnew;
    elemptype c;
    //定义一个根节点，表示一棵树
    bitree tree = NULL;
    //申请辅助队列成员
    qmem listnew =NULL,listhead=NULL,listtail=NULL,pcur;
    //循环读取缓存内容
    while(scanf("%c",&c)){
        if('\n' == c){
            break;
        }else{

            //设置二叉树新结点
            pnew = (bitree) calloc(1,sizeof (Binote));
            pnew->cont = c;
            //设置辅助队列新节点
            listnew= (qmem) calloc(1,sizeof (queuemember));
            listnew->p = pnew;

            if (NULL == tree){
                //插入第一个树节点
                tree =pnew;
                //队头和队尾指针都指向第一个节点
                listhead = listnew;
                listtail = listnew;
                //当前节点指向队列第一个节点
                pcur = listnew;
            }else{
                //元素入队
                listtail->next = listnew;
                listtail = listnew;
                //节点插入
                if(NULL == pcur->p->lchild){
                    pcur->p->lchild = pnew;
                }else if (NULL == pcur->p->rchild){
                    pcur->p->rchild = pnew;
                    pcur= pcur->next;
                    listhead = pcur;
                }
            }

        }
        }
    return 0;
}
